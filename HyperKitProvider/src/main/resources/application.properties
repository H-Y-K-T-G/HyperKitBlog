# Base packages to scan Dubbo Components (e.g @Service , @Reference)
dubbo.scan.basePackages=org.librazy.demo.dubbo.service
# Dubbo Config properties
## ApplicationConfig Bean
spring.main.web-application-type=none
spring.application.name=dubbodemo-service
spring.profiles.active=dev
spring.dubbo.appname=dubbodemo-service
spring.dubbo.server=true
spring.dubbo.registry=multicast://224.1.1.1:9090
spring.dubbo.provider.timeout=6000
spring.dubbo.provider.retries=1
spring.dubbo.provider.delay=-1
# it is recommended you create your own custom N. consider using 2048 bits.
thinbus.N=38193677523443585666865322649277762133095397476505171197205724703599503674683111929233979422978964899323738513826278586738252555419742897469373118527669721591672146272815565074321282513559379840313858545783821636829716857322010430808091660391530660274015185398916093202974035013266197596940847263498882080009368306877232480677253495946014440001831183562867180525634053116611191340557321872832324687329667320089782875713697672295720028332837609766786602129016961537400166388376031415433042162665179216702787422628761858033800814378040568807865760416941773905695482453076224837799840666016691021623229673828315870626324643388086281471360375869093243145963294021091851505192051646228050684009805942034243698454450038258257259422845958302852965412503894195356167215075105116842282961401804448912121859165879845552580137055808819864066268454859089602276673325705249590788336316843652539498610172564847751008403678343552186863446111780432794308754534136215361248246293004180904300969795845812743533388061886029645293337027363946321907052721595313687610098750218725046235483392127089312394803333232818309380019758230771169106964858445129088111437479345137336055776871796922697862313883545854552215685482009937096484655314927402829160
thinbus.g=2
# used to generate fake salt values for non-existant users so that attackers cannot learn who is a user and who is not
thinbus.salt.of.fake.salt=3rwerfeastw4tW6DT2Tt6t7yo87tyukertgwaewfdW
jwt.expiration=604800
jwt.refresh.maximum=3
jwt.tokenHead=Bearer
jwt.header=Authorization
jwt.secret=4tisrt9jt60LUygr
#we want to encrypted the verifier in the db to protect against offline dictionary attacks in case the offsite db backups get leaked
encryption.algorithm=AES/ECB/PKCS5Padding
# CHANGE ME!
encryption.key=MySuperSecretKey
redis.host=127.0.0.1
redis.port=6379
redis.password=
