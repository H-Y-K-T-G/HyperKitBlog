buildscript {
    repositories {
        if (!System.getenv('CI')) { maven { url 'http://maven.aliyun.com/nexus/content/repositories/jcenter' }} else {jcenter()}
        maven { url 'https://repo.spring.io/libs-milestone' }
        maven { url 'http://oss.jfrog.org/artifactory/oss-snapshot-local/' }
    }

    dependencies {
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.8'
        classpath 'org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.16'
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.20.0'
        classpath 'io.github.swagger2markup:swagger2markup-spring-restdocs-ext:1.3.3'
        classpath 'io.github.swagger2markup:swagger2markup-gradle-plugin:1.3.3'
        classpath 'org.jruby:jruby-complete:9.1.13.0'
    }
}

plugins {
    id 'java'
    id 'war'
}

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'org.asciidoctor.convert'
apply plugin: 'io.github.swagger2markup'

sourceCompatibility = 1.8
targetCompatibility = 1.8

group 'org.librazy.demo.dubbo'
version '1.0-SNAPSHOT'

repositories {
    if (!System.getenv('CI')) { maven { url 'http://maven.aliyun.com/nexus/content/repositories/jcenter' }} else {jcenter()}
    maven {
        url 'https://repo.spring.io/libs-milestone'
    }
}

ext {
    asciiDocOutputDir = file("${buildDir}/asciidoc/generated")
    swaggerOutputDir = file("${buildDir}/swagger")
    snippetsOutputDir = file("${buildDir}/asciidoc/snippets")
    springfoxVersion = '2.9.2'
}

dependencies {
    compile project(":HyperKitAPI")
    compile project(":HyperKitService")
    compile 'biz.paluch.redis:lettuce:5.0.0.Beta1'
    compile 'com.alibaba:dubbo:2.6.2'
    compile "com.alibaba.spring.boot:dubbo-spring-boot-starter:2.0.0"
    compile 'com.alibaba.spring.boot:dubbo-spring-boot-starter:2.0.0'
    compile 'com.fasterxml.jackson.core:jackson-core:2.9.6'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.9.6'
    compile 'com.google.code.findbugs:jsr305:3.0.2'
    compile 'com.google.guava:guava:25.1-jre'
    compile 'com.h2database:h2:1.4.197'
    compile 'io.jsonwebtoken:jjwt:0.9.1'
    compile 'io.springfox:springfox-swagger-ui:2.9.2'
    compile "io.springfox:springfox-swagger2:2.9.2"
    compile "org.bitbucket.simon_massey:thinbus-srp6a-js:$thinbusVersion"
    compile 'org.elasticsearch:elasticsearch:6.3.1'
    compile 'org.elasticsearch.client:elasticsearch-rest-high-level-client:6.3.2'
    compile 'org.jetbrains:annotations:16.0.2'
    compile "org.springframework.boot:spring-boot-devtools:$springBootVersion"
    compile "org.springframework.boot:spring-boot-starter:$springBootVersion"
    compile "org.springframework.boot:spring-boot-starter-data-jpa:$springBootVersion"
    compile "org.springframework.boot:spring-boot-starter-security:$springBootVersion"
    compile "org.springframework.boot:spring-boot-starter-web:$springBootVersion"
    compile "org.springframework.boot:spring-boot-starter-websocket:$springBootVersion"
    compile "org.springframework.security:spring-security-messaging:$springSecurityVersion"

    providedRuntime "org.springframework.boot:spring-boot-starter-tomcat:$springBootVersion"

    runtime 'mysql:mysql-connector-java:8.0.11'

    testCompile "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testCompile "org.springframework.boot:spring-boot-starter-test:$springBootVersion"
    testCompile "org.springframework.security:spring-security-test:$springSecurityVersion"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
    testRuntime "org.junit.vintage:junit-vintage-engine:$junitVersion"
}

compileJava {
    options.compilerArgs += ["-Xlint:all"]
}

bootRun {
    environment 'spring.profiles.active', 'dev'
}

test {
    systemProperty 'io.springfox.staticdocs.outputDir', swaggerOutputDir
    systemProperty 'io.springfox.staticdocs.snippetsOutputDir', snippetsOutputDir
    useJUnitPlatform()
    environment 'spring.profiles.active', 'test-default'
    testLogging.exceptionFormat = 'full'
}

convertSwagger2markup {
    dependsOn test
    inputs.files(swaggerOutputDir)

    swaggerInput "${swaggerOutputDir}/swagger.json"
    outputDir asciiDocOutputDir
    config = [
            'swagger2markup.pathsGroupedBy' : 'TAGS',
            'swagger2markup.extensions.springRestDocs.snippetBaseUri': snippetsOutputDir.getAbsolutePath()]
}

asciidoctor {
    dependsOn convertSwagger2markup
    sources {
        include 'index.adoc'
    }
    backends = ['html5', 'pdf']
    attributes = [
            doctype: 'book',
            toc: 'left',
            toclevels: '3',
            numbered: '',
            sectlinks: '',
            sectanchors: '',
            hardbreaks: '',
            generated: asciiDocOutputDir
    ]
}

bootWar {
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
    from ("${asciidoctor.outputDir}/pdf") {
        into 'static/docs'
    }
}