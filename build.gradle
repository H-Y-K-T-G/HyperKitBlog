buildscript {
    repositories {
        if (!System.getenv('CI')) { maven { url 'http://maven.aliyun.com/nexus/content/repositories/jcenter' }} else {jcenter()}
    }
    dependencies {
        classpath 'com.netflix.nebula:gradle-lint-plugin:9.3.4'
        classpath 'com.palantir:jacoco-coverage:0.4.0'
    }
}

plugins {
    id "org.sonarqube" version "2.6.2"
}

apply plugin: 'com.palantir.jacoco-full-report'

repositories { if (!System.getenv('CI')) { maven { url 'http://maven.aliyun.com/nexus/content/repositories/jcenter' }} else {jcenter()} }

allprojects {
    apply plugin: 'jacoco'
    apply plugin: 'idea'
    apply plugin: 'nebula.lint' // add as many rules here as you'd like
    gradleLint.alwaysRun = false
    gradleLint.rules = ['all-dependency']

    apply from: "$rootDir/ColoredOutput.gradle"
    project.ext.set("TRAVIS_FOLDING", true)
}

// https://cristian.io/post/sonar-coverage/

def allTestCoverageFile = "$buildDir/jacoco/allTestCoverage.exec"

sonarqube {
    properties {
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.jacoco.reportPaths", allTestCoverageFile
    }
}

task jacocoMergeTest(type: JacocoMerge) {
    destinationFile = file(allTestCoverageFile)
    executionData = project.fileTree(dir: '.', include: '**/build/jacoco/test.exec')
}

task jacocoMerge(dependsOn: ['jacocoMergeTest']) {
    // used to run the other merge tasks
}

subprojects {
    sonarqube {
        properties {
            property "sonar.coverage.exclusions", "**/domain/*.java" // Generated Code
            property "sonar.exclusions", "**/*Application.java,**/domain/*.java" // Not a part of application
            property "sonar.jacoco.reportPaths", allTestCoverageFile
        }
    }
}